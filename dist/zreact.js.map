{"version":3,"file":"zreact.js","sources":["../src/options.ts","../src/vnode.ts","../src/h.ts","../src/util.ts","../src/clone-element.ts","../src/constants.ts","../src/render-queue.ts","../src/vdom/component-recycler.ts","../src/dom/index.ts","../src/vdom/index.ts","../src/vdom/diff.ts","../src/vdom/component.ts","../src/component.ts","../src/pure-component.ts","../src/render.ts","../src/create-class.ts","../src/zreact.ts"],"sourcesContent":["import { VNode } from \"./vnode\";\nimport { Component } from \"component\";\n\nconst options: {\n    // render更新后钩子比componentDidUpdate更后面执行\n    afterUpdate?: (component: Component) => void;\n    // dom卸载载前钩子比componentWillUnmount更先执行\n    beforeUnmount?: (component: Component) => void;\n    // dom挂载后钩子比componentDidMount更先执行\n    afterMount?: (component: Component) => void;\n    // setComponentProps时强制为同步render\n    syncComponentUpdates?: boolean;\n    // 自定义异步调度方法，会异步执行传入的方法\n    debounceRendering?: (render: () => void) => void;\n    // vnode实例创建时的钩子\n    vnode?: (vnode: VNode) => void;\n    // 事件钩子，可以对event过滤返回的会代替event参数\n    event?: (event: Event) => any;\n    // 是否自动对事件方法绑定this为组件，默认为true(preact没有)\n    eventBind?: boolean;\n} = {\n    eventBind: true,\n};\n\nexport default options;\n","import { Component } from \"./component\";\nimport { IKeyValue } from \"./types\";\n\n/**\n * 虚拟的Node，与VDom不同，用于生成真实的dom\n */\nexport class VNode {\n    /**\n     * 组件名\n     * {string} 为原生组件\n     * {Component|function} 为自定义组件\n     */\n    public nodeName: string | typeof Component | ((props?: IKeyValue, state?: IKeyValue, context?: IKeyValue) => VNode);\n    /**\n     * 子组件\n     */\n    public children: Array<string|number|boolean|VNode>;\n    /**\n     * 组件所属的属性\n     */\n    public attributes?: IKeyValue;\n    /**\n     * 属性中的key\n     */\n    public key?: any;\n}\n","import { Component } from \"./component\";\nimport options from \"./options\";\nimport { VNode } from \"./vnode\";\nimport { IKeyValue } from \"./types\";\n\n// const EMPTY_CHILDREN: any[] = [];\n\n/** JSX/hyperscript reviver\n * Benchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n * 标准JSX转换函数\n * @param {string|Component} nodeName 组件{@link Component}或者原生dom组件名\n * @param {{key: string => value: string}} attributes 组件属性\n * @see http://jasonformat.com/wtf-is-jsx\n * @public\n */\nexport function h(nodeName: string | typeof Component | ((props?: IKeyValue, state?: IKeyValue, context?: IKeyValue) => VNode), attributes: IKeyValue, ...args: Array<VNode|string>) {\n    // 初始化子元素列表\n    const stack: Array<VNode|string> = [];\n    const children: Array<VNode|string> = [];\n    // let i: number;\n    // let child: any;\n    // 是否为原生组件\n    let simple: boolean;\n    // 上一个子元素是否为原生组件\n    let lastSimple: boolean = false;\n    // 把剩余的函数参数全部倒序放入stack\n    for (let i = args.length; i--; ) {\n        stack.push(args[i]);\n    }\n    // 把元素上属性的children放入栈\n    if (attributes && attributes.children != null) {\n        if (!stack.length) {\n            stack.push(attributes.children);\n        }\n        // 删除\n        delete attributes.children;\n    }\n    // 把stack一次一次取出\n    while (stack.length) {\n        // let num = 0;\n        // 取出最后一个\n        let child: any = stack.pop();\n        if (child && child.pop !== undefined) {\n            // 如果是个数组就倒序放入stack\n            for (let i = child.length; i-- ; ) {\n                const item = child[i];\n                // 修复多个map时不同map的key相同\n                // if (typeof item === \"object\" && item.key) {\n                //     item.key = `L${num}-${item.key}`;\n                //     num ++;\n                // }\n                stack.push(item);\n            }\n        } else {\n            // 清空布尔\n            if (typeof child === \"boolean\") {\n                child = null;\n            }\n            // 判断当前组件是否为自定义组件\n            simple = typeof nodeName !== \"function\";\n            if (simple) {\n                // 原生组件的子元素处理\n                if (child == null) {\n                    // null to \"\"\n                    child = \"\";\n                } else if (typeof child === \"number\") {\n                    // num to string\n                    child = String(child);\n                } else if (typeof child !== \"string\") {\n                    // 不是 null,number,string 的不做处理\n                    // 并且设置标记不是一个字符串\n                    simple = false;\n                }\n            }\n            if (simple && lastSimple) {\n                // 当前为原生组件且子元素为字符串，并且上一个也是。\n                // 就把当前子元素加到上一次的后面。\n                children[children.length - 1] += child;\n            } else {\n                // 其它情况直接加入children\n                children.push(child);\n            }\n            /* else if (children === EMPTY_CHILDREN) {\n                children = [child];\n            } */\n            // 记录这次的子元素状态\n            lastSimple = simple;\n        }\n    }\n    const p = new VNode();\n    // 设置原生组件名字或自定义组件class(function)\n    p.nodeName = nodeName;\n    // 设置子元素\n    p.children = children;\n    // 设置属性\n    p.attributes = attributes == null ? undefined : attributes;\n    // 设置key\n    p.key = attributes == null ? undefined : attributes.key;\n    // vnode 钩子\n    if (options.vnode !== undefined) {\n        options.vnode(p);\n    }\n    return p;\n}\n","declare const Promise: any;\ndeclare class Object {\n    public static assign: (...args: any[]) => any;\n}\n\n/**\n * 异步调度方法，异步的执行传入的方法\n */\nexport let defer: (fn: () => void) => void;\nif (typeof Promise === \"function\") {\n    const promiseDefer = Promise.resolve();\n    defer = (fn: () => void) => promiseDefer.then(fn);\n} else {\n    defer = setTimeout;\n}\n\n/**\n * Object.assign的兼容\n */\nexport const extend = Object.assign || function assign_(t: any) {\n    for (let s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (const p in s) {\n            if (Object.prototype.hasOwnProperty.call(s, p)) {\n                t[p] = s[p];\n            }\n        }\n    }\n    return t;\n};\n","import { h } from \"./h\";\nimport { VNode } from \"./vnode\";\nimport { extend } from \"./util\";\n\n/**\n * 通过VNode对象新建一个自定义的props，children的VNode对象\n * @param vnode 旧vnode\n * @param props 新的props\n * @param children 新的子组件\n */\nexport function cloneElement(vnode: VNode, props: any, ...children: any[]) {\n    const child: any = children.length > 0 ? children : vnode.children;\n    return h(\n        vnode.nodeName,\n        extend({}, vnode.attributes, props),\n        child,\n    );\n}\n","// 不进行render\nexport const NO_RENDER = 0;\n// 同步render标记\nexport const SYNC_RENDER = 1;\n// 用于Component.forceUpdate方法更新组件时的标记\nexport const FORCE_RENDER = 2;\n// 异步render标记\nexport const ASYNC_RENDER = 3;\n\n// dom的props属性key\nexport const ATTR_KEY = \"__preactattr_\";\n\n// 使用number值的style属性\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\n","import { Component } from \"./component\";\nimport options from \"./options\";\nimport { defer } from \"./util\";\nimport { renderComponent } from \"./vdom/component\";\n\nlet items: Component[] = [];\n\n/**\n * 把Component放入队列中等待更新\n * @param component 组件\n */\nexport function enqueueRender(component: Component) {\n    if (!component._dirty) {\n        // 防止多次render\n        component._dirty = true;\n        const len = items.push(component);\n        if (len === 1) {\n            // 在第一次时添加一个异步render，保证同步代码执行完只有一个异步render。\n            const deferFun = options.debounceRendering || defer;\n            deferFun(rerender);\n        }\n    }\n}\n\n/**\n * 根据Component队列更新dom。\n * 可以setState后直接执行这个方法强制同步更新dom\n */\nexport function rerender() {\n    let p: Component | undefined;\n    const list = items;\n    items = [];\n    while (p = list.pop()) {\n        if (p._dirty) {\n            // 防止多次render。\n            renderComponent(p);\n        }\n    }\n}\n","import { Component } from \"../component\";\nimport { IKeyValue } from \"../types\";\n\n/**\n * 缓存卸载自定义组件对象列表\n */\nconst components: {\n    [name: string]: Component[];\n} = {};\n\n/**\n * 缓存卸载后的自定义组件\n * @param component 卸载后的组件\n */\nexport function collectComponent(component: Component) {\n    const constructor: any = component.constructor;\n    // 获取组件名\n    const name = constructor.name;\n    // 获取该组件名所属的列表\n    let list = components[name];\n    if (!list) {\n        list = components[name] = [];\n    }\n    // 设置\n    list.push(component);\n}\n\n/**\n * 复用已卸载的组件\n * @param Ctor 要创建的组件对象\n * @param props\n * @param context\n */\nexport function createComponent(Ctor: any, props: IKeyValue, context: IKeyValue) {\n    const list = components[Ctor.name];\n    let inst: Component;\n    // 创建组件实例\n    if (Ctor.prototype && Ctor.prototype.render) {\n        inst = new Ctor(props, context);\n        Component.call(inst, props, context);\n    } else {\n        // 一个方法\n        inst = new Component(props, context);\n        // 设置到constructor上\n        inst.constructor = Ctor;\n        // render用doRender代替\n        inst.render = doRender;\n    }\n    // 查找之前的卸载缓存\n    if (list) {\n        for (let i = list.length; i-- ; ) {\n            const item = list[i];\n            if (item.constructor === Ctor) {\n                inst.nextVDom = item.nextVDom;\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n    return inst;\n}\n\n/**\n * 代理render,去除state\n * @param props\n * @param state\n * @param context\n */\nfunction doRender(props: IKeyValue, state: IKeyValue, context: IKeyValue) {\n    return this.constructor(props, context);\n}\n","import { IS_NON_DIMENSIONAL } from \"../constants\";\nimport { VDom } from \"../vdom/index\";\nimport options from \"../options\";\n\n/**\n * 创建一个原生html组件\n * @param nodeName 标签名\n * @param isSvg 是否为svg\n */\nexport function createNode(nodeName: string, isSvg: boolean): HTMLElement {\n    const node: any = isSvg\n        ? document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName)\n        : document.createElement(nodeName);\n    // 设置原始的nodeName到dom上normalizedNodeName\n    // node.normalizedNodeName = nodeName;\n    return node;\n}\n\n/**\n * 移除dom\n * @param node 需要移除的node\n */\nexport function removeNode(node: Element | Text | Node) {\n    const parentNode = node.parentNode;\n    if (parentNode) {\n        parentNode.removeChild(node);\n    }\n}\n\n/**\n * 通过VNode的props设置真实的dom\n * @param node dom节点\n * @param name 属性名\n * @param old 旧属性值\n * @param value 新属性值\n * @param isSvg 是否为svg\n * @param child VDom原dom上的props，和上下文环境，事件就在其中\n */\nexport function setAccessor(\n    vdom: VDom,\n    name: string,\n    old: any,\n    value: any,\n    isSvg: boolean,\n) {\n    const node: any = vdom.base;\n    if (name === \"className\") {\n        // 把className重名为class\n        name = \"class\";\n    }\n    if (name === \"key\") {\n        // 不对key属性做dom设置\n    } else if (\"ref\" === name) {\n        if (old) {\n            // 对旧的ref设置null保证原方法里的引用移除\n            old(null);\n        }\n        if (value) {\n            // 给新方法设置vdom\n            value(vdom);\n        }\n    } else if (\"class\" === name && !isSvg) {\n        // 直接通过className设置class\n        node.className = value || \"\";\n    } else if (\"style\" === name) {\n        if (!value || typeof value === \"string\" || typeof old === \"string\") {\n            // 对于字符串型的直接设置到style.cssText\n            node.style.cssText = value || \"\";\n        }\n        if (value && typeof value === \"object\") {\n            // 如果是一个对象遍历设置\n            if (typeof old !== \"string\") {\n                for (const i in old) {\n                    if (!(i in value)) {\n                        // 清理旧属性且不在新的里\n                        node.style[i] = \"\";\n                    }\n                }\n            }\n            for (const i in value) {\n                // 设置新属性\n                node.style[i] = typeof value[i] === \"number\"\n                && IS_NON_DIMENSIONAL.test(i) === false ? (value[i] + \"px\") : value[i];\n            }\n        }\n    } else if (\"dangerouslySetInnerHTML\" === name) {\n        if (value) {\n            // innerHTML\n            node.innerHTML = value.__html || \"\";\n            // child.children = [];\n            // const childNodes = node.childNodes;\n            // for (let i = 0, len = childNodes.length; i < len ; i++) {\n            //     child.children.push({\n            //         base: childNodes[i],\n            //     });\n            // }\n\n        }\n    } else if (name[0] === \"o\" && name[1] === \"n\") {\n        // 事件绑定\n        const oldName = name;\n        name = name.replace(/Capture$/, \"\");\n        // 判断是否 事件代理(事件委托)\n        const useCapture = oldName !== name;\n        // 去除前面的on并转换为小写\n        name = name.toLowerCase().substring(2);\n        if (value) {\n            if (!old) {\n                // 保证只有一次绑定事件\n                addEventListener(vdom, name, useCapture);\n            }\n        } else {\n            // 移除事件\n            removeEventListener(vdom, name, useCapture);\n        }\n        if (!vdom.listeners) {\n            // 在上下文中创建存放绑定的方法的对象\n            vdom.listeners = {};\n        }\n        vdom.listeners[name] = value;\n    } else if (name !== \"list\" && name !== \"type\" && !isSvg && name in node) {\n        // 安全设置属性\n        setProperty(node, name, value == null ? \"\" : value);\n        if (value == null || value === false) {\n            node.removeAttribute(name);\n        }\n    } else {\n        // 设置Attribute\n        const ns = isSvg && (name !== (name = name.replace(/^xlink\\:?/, \"\")));\n        // null || undefined || void 0 || false\n        if (value == null || value === false) {\n            if (ns) {\n                node.removeAttributeNS(\n                    \"http://www.w3.org/1999/xlink\",\n                    name.toLowerCase(),\n                );\n            } else {\n                node.removeAttribute(name);\n            }\n        } else if (typeof value !== \"function\") {\n            if (ns) {\n                node.setAttributeNS(\n                    \"http://www.w3.org/1999/xlink\",\n                    name.toLowerCase(),\n                    value,\n                );\n            } else {\n                node.setAttribute(name, value);\n            }\n        }\n    }\n}\n\nconst isIe8 = typeof document.addEventListener !== \"function\";\n\nfunction setProperty(node: any, name: string, value: string) {\n    try {\n        node[name] = value;\n    } catch (e) { }\n}\n\n/**\n * 生成用于绑定事件的方法，保证每次更新props上的事件方法不会重新绑定事件\n * @param child 上下文\n * @param useCapture 是否冒泡(兼容ie8)\n */\nfunction eventProxy(vdom: VDom, useCapture: boolean): (e: Event) => void {\n    return (e: Event) => {\n        if (isIe8 && !useCapture) {\n            // ie8事件默认冒泡所以需要阻止\n            e.cancelBubble = !useCapture;\n        }\n        // 取出对于的props事件\n        const listener = vdom.listeners && vdom.listeners[e.type];\n        // 事件钩子\n        const event = options.event && options.event(e) || e;\n        if (listener) {\n            if (options.eventBind && vdom.component) {\n                // 自动使用所属自定义组件来做this\n                return listener.call(vdom.component, event);\n            }\n            // 直接调用事件\n            return listener(event);\n        }\n    };\n}\n\nexport function getPreviousSibling(node: Node): Node| null {\n    return node.previousSibling;\n}\n\nexport function getLastChild(node: Node): Node| null {\n    return node.lastChild;\n}\n\n/**\n * 判断是否为Text节点\n * @param node\n */\nexport function isTextNode(node: Text | any): boolean {\n    return node.splitText !== undefined;\n}\n\n/**\n * 绑定代理事件\n * @param node dom节点\n * @param name 事件名\n * @param useCapture 是否冒泡\n * @param child 上下文\n */\nfunction addEventListener(vdom: VDom, name: string, useCapture: boolean) {\n    // 生成当前事件的代理方法\n    const eventProxyFun = eventProxy(vdom, useCapture);\n    if (!vdom.eventProxy) {\n        vdom.eventProxy = {};\n    }\n    // 把事件代理方法挂载到child.event上等待卸载时使用\n    vdom.eventProxy[name] = eventProxyFun;\n    const node: any = vdom.base;\n    if (!isIe8) {\n        node.addEventListener(name, eventProxyFun, useCapture);\n    } else {\n        node.attachEvent(\"on\" + name, eventProxyFun);\n    }\n}\n\n/**\n * 移除事件\n * @param node dom节点\n * @param name 事件名\n * @param useCapture 是否冒泡\n * @param child 上下文\n */\nfunction removeEventListener(vdom: VDom, name: string, useCapture: boolean) {\n    // 把上下文中的存储的代理事件解绑\n    const eventProxyFun = vdom.eventProxy && vdom.eventProxy[name];\n    if (vdom.eventProxy && eventProxyFun) {\n        vdom.eventProxy[name] = undefined;\n    }\n    const node: any = vdom.base;\n    if (!isIe8) {\n        node.removeEventListener(name, eventProxyFun, useCapture);\n    } else {\n        node.detachEvent(\"on\" + name, eventProxyFun);\n    }\n}\n","import { VNode } from \"../vnode\";\nimport { Component } from \"../component\";\nimport { isTextNode } from \"../dom/index\";\nimport { ATTR_KEY } from \"../constants\";\nimport { extend } from \"../util\";\nimport { IKeyValue } from \"../types\";\n\n/**\n * dom节点与vnode是否相同的标签\n * @param node\n * @param vnode\n * @param hydrating\n */\nexport function isSameNodeType(node: VDom, vnode: string|number|boolean|VNode, hydrating: boolean) {\n    if (typeof vnode === \"string\" || typeof vnode === \"number\" || typeof vnode === \"boolean\") {\n        // vnode是文本节点,判断dom是否为文本节点\n        return isTextNode(node.base);\n    }\n    if (typeof vnode.nodeName === \"string\") {\n        // vnode是原生组件,判断dom非组件的根节点且标签名相同\n        return !node.componentConstructor && isNamedNode(node, vnode.nodeName);\n    }\n    return hydrating || node.componentConstructor === vnode.nodeName;\n}\n\n/** 判断标签名是否相同.\n * @param {Element} node\n * @param {String} nodeName\n */\nexport function isNamedNode(\n    node: VDom,\n    nodeName: string,\n) {\n    return node.normalizedNodeName === nodeName\n        || (node.base && node.base.nodeName.toLowerCase() === nodeName.toLowerCase());\n}\n\n/**\n * 获取当前组件所有地方来的props\n * @param vnode\n */\nexport function getNodeProps(vnode: VNode) {\n    // jsx上的属性\n    const props = extend({}, vnode.attributes);\n    props.children = vnode.children;\n    // 组件类\n    const nodeName: any = vnode.nodeName;\n    // 组件默认props\n    const defaultProps = nodeName.defaultProps;\n    if (defaultProps !== undefined) {\n        for (const i in defaultProps) {\n            if (props[i] === undefined) {\n                props[i] = defaultProps[i];\n            }\n        }\n    }\n    return props;\n}\n\ninterface IEventFun {\n    [name: string]: (e: Event) => void;\n}\n\n/**\n * 真正dom绑定的一些数据\n * @constructor\n */\nexport class VDom {\n    /**\n     * dom所属的顶级Component\n     */\n    public component?: Component;\n    /**\n     * 子组件\n     */\n    public children?: VDom[];\n    /**\n     * 真实dom索引\n     */\n    public base: Element| Text | Node;\n    /**\n     * 每种事件的代理方法存放点, 真实绑定到dom上的方法。\n     */\n    public eventProxy?: { [name: string]: ((e: Event) => void) | undefined };\n    /**\n     * dom所属的props\n     */\n    public props?: IKeyValue | boolean;\n    /**\n     * 通过props设置的事件方法, 通过eventProxy来调用, 保证在不停的props变化时不会一直绑定与解绑。\n     */\n    public listeners?: IEventFun;\n    /**\n     * dom标签名\n     */\n    public normalizedNodeName?: string;\n    public parent?: VDom;\n    /**\n     * component类(原型)\n     */\n    public componentConstructor?: any;\n    constructor(base: Element| Text | Node) {\n        this.base = base;\n    }\n    public clear() {\n        this.children = undefined;\n        this.component = undefined;\n        this.eventProxy = undefined;\n        this.listeners = undefined;\n        this.normalizedNodeName = undefined;\n        this.props = undefined;\n        this.componentConstructor = undefined;\n    }\n}\n\nexport function buildVDom(base?: Element|Text|Node) {\n    if (base) {\n        return new VDom(base);\n    }\n}\n","import options from \"../options\";\nimport { ATTR_KEY } from \"../constants\";\nimport { isSameNodeType, isNamedNode } from \"./index\";\nimport { VNode } from \"../vnode\";\nimport { Component } from \"../component\";\nimport { IKeyValue } from \"../types\";\nimport { VDom } from \"./index\";\nimport {\n    buildComponentFromVNode,\n    unmountComponent,\n} from \"./component\";\nimport {\n    setAccessor,\n    createNode,\n    removeNode,\n    getPreviousSibling,\n    getLastChild,\n    isTextNode,\n} from \"../dom/index\";\n\nexport const mounts: Component[] = [];\n\nexport let diffLevel = 0;\n\nlet isSvgMode = false;\n\nlet hydrating = false;\n\n/**\n * 对挂载队列触发挂载完成钩子\n */\nexport function flushMounts() {\n    let c;\n    while (c = mounts.pop()) {\n        const afterMount = options.afterMount;\n        if (afterMount) {\n            afterMount(c);\n        }\n        if (c.componentDidMount) {\n            c.componentDidMount();\n        }\n    }\n}\n\n/**\n * 比较dom差异\n * @param vdom 原vdom\n * @param vnode jsx\n * @param context 通过render来的是一个空对象。\n * @param mountAll 是否已全部挂载\n * @param parent 挂载元素\n * @param componentRoot 是否为componentRoot\n */\nexport function diff(\n    vdom: VDom | undefined,\n    vnode: VNode | void,\n    context: IKeyValue,\n    mountAll: boolean,\n    parent: any,\n    componentRoot: boolean,\n): VDom {\n    // if (child.base && dom !== child.base) {\n    //     // 原preact使用dom存放数据，现在，如果dom不存在，且pchild内有dom就卸载掉\n    //     removeDomChild(child);\n    // }\n    if (!diffLevel++) {\n        // 在diff调用递归层数为0时设置isSvgMode，hydrating\n        // 判断是否为svg\n        isSvgMode = parent != null && parent.ownerSVGDocument !== undefined;\n        // 判断是否在上次渲染过了\n        hydrating = vdom != null && !(vdom.props);\n    }\n    // 调用idiff生成dom\n    const ret = idiff(\n        vdom,\n        vnode,\n        context,\n        mountAll,\n        componentRoot,\n    );\n    // 如果有父dom直接appendChild\n    if (parent && ret.base.parentNode !== parent) {\n        parent.appendChild(ret.base);\n    }\n    if (!--diffLevel) {\n        // diff调用递归层为0,说明已经全部diff完毕\n        hydrating = false;\n        if (!componentRoot) {\n            // 非renderComponent执行的diff如render，触发挂载完成生命周期\n            // 通过renderComponent执行的是更新状态，无需重新触发挂载生命周期\n            flushMounts();\n        }\n    }\n    return ret;\n}\n\n/**\n * 比较dom和vnode，进行新建dom，复用dom，或者新建组件，复用组件\n * @param vdom 原dom\n * @param vnode 用于创建dom的虚拟对象\n * @param context 组件上下文用于组件创建时使用\n * @param mountAll 是否需要挂载\n * @param componentRoot 是否来自renderComponent\n */\nfunction idiff(\n    vdom: VDom | undefined | null,\n    vnode: VNode|string|number|boolean| void,\n    context: IKeyValue,\n    mountAll: boolean,\n    componentRoot?: boolean,\n): VDom {\n    const prevSvgMode = isSvgMode;\n    let out = vdom && vdom.base;\n\n    if (vnode == null || typeof vnode === \"boolean\") {\n        // 去除空，布尔值转为空字符串\n        vnode = \"\";\n    }\n    if (typeof vnode === \"string\" || typeof vnode === \"number\") {\n        // 文本节点处理\n        if (\n            vdom\n            && isTextNode(vdom.base)\n            && vdom.base.parentNode\n            && (!vdom.component || componentRoot)\n        ) {\n            // 原dom就是文本节点，更新文本内容\n            if (vdom.base.nodeValue !== vnode) {\n                vdom.base.nodeValue = String(vnode);\n            }\n        } else {\n            // 新建一个文本dom\n            const dom = document.createTextNode(String(vnode));\n            const newVDom = new VDom(dom);\n            if (vdom) {\n                // 来自renderComponent判断并处理vdom的子vdom更换\n                if (componentRoot) {\n                    replaceVDomParent(vdom, newVDom);\n                }\n                // 如果有旧dom，就替换并卸载旧的。\n                if (vdom.base.parentNode) {\n                    vdom.base.parentNode.replaceChild(dom, vdom.base);\n                }\n                recollectNodeTree(vdom, true);\n            }\n            vdom = newVDom;\n        }\n        // 文本节点的props直接设置为true\n        vdom.props = true;\n        return vdom;\n    }\n    let vnodeName = vnode.nodeName;\n    if (typeof vnodeName === \"function\") {\n        // 是一个组件,创建或复用组件实例，返回dom\n        return buildComponentFromVNode(vdom, vnode, context, mountAll);\n    }\n    // 重新判断一下是否要创建svg\n    isSvgMode = vnodeName === \"svg\"\n        ? true : vnodeName === \"foreignObject\" ? false : isSvgMode;\n    // 一般通过babel的jsx无法发生非字符串的vnodeName\n    vnodeName = String(vnodeName);\n    if (!vdom || !isNamedNode(vdom, vnodeName) || !out) {\n        // 没有原dom或者原dom与vnode里的不同，新建一个\n        out = createNode(vnodeName, isSvgMode);\n        const newVDom = new VDom(out);\n        if (vdom) {\n            // 来自renderComponent判断并处理vdom的子vdom更换\n            if (componentRoot) {\n                replaceVDomParent(vdom, newVDom);\n            }\n            // 旧dom存在时的一些处理\n            // 把旧dom的子元素全部移动到新dom中\n            while (vdom.base.firstChild) {\n                out.appendChild(vdom.base.firstChild);\n            }\n            // 把新dom挂载到旧dom上的位置\n            if (vdom.base.parentNode) {\n                vdom.base.parentNode.replaceChild(out, vdom.base);\n            }\n            // 卸载旧dom\n            recollectNodeTree(vdom, true);\n        }\n        vdom = newVDom;\n        vdom.normalizedNodeName = vnodeName;\n    }\n    const fc = out.firstChild;\n    // 取出上次存放的props\n    let props = vdom.props;\n    // 获取虚拟的子节点\n    const vchildren = vnode.children;\n    if (props == null || typeof props === \"boolean\") {\n        // 上回的props不存在说明，这次一般为新建（preact有可能通过原生dom操作删除）\n        vdom.props = props = {};\n        // 把dom中的attributes也就是我们常见的setAttribute的属性，取出\n        // 据说ie6-7的property也在attributes，就是style，id，class这种\n        for (let a = out.attributes, i = a.length; i-- ; ) {\n            const attr = a[i];\n            props[attr.name] = attr.value;\n        }\n    }\n\n    // if (vdom.base !== out) {\n    //     vdom.base = out;\n    // }\n    if (\n        !hydrating\n        && vchildren\n        && vchildren.length === 1\n        && typeof vchildren[0] === \"string\"\n        && fc != null\n        && isTextNode(fc)\n        && fc.nextSibling == null\n    ) {\n        // 如果未渲染过，且vnode的子元素和dom子元素长度都为1且为文本\n        // 替换文本\n        if (fc.nodeValue !== vchildren[0]) {\n            fc.nodeValue = String(vchildren[0]);\n        }\n    } else if (vchildren && vchildren.length || fc != null) {\n        if (vdom.children == null) {\n            vdom.children = [];\n        }\n        // vnode子元素需要渲染或者为空但dom子元素需要清空\n        const childrenHydrating = hydrating || (typeof props === \"object\" && props.dangerouslySetInnerHTML != null);\n        diffChildren(\n            vdom,\n            vchildren,\n            context,\n            mountAll,\n            childrenHydrating,\n        );\n    }\n    // 设置dom属性\n    diffAttributes(vdom, vnode.attributes, props);\n    // 把props存到dom上下文中\n    // child[ATTR_KEY] = props;\n    // 还原\n    isSvgMode = prevSvgMode;\n    return vdom;\n}\n\n/**\n * 比较子元素进行更新\n * @param vdom 原vdom\n * @param vchildren 虚拟子元素数组\n * @param context 上下文\n * @param mountAll 是否需要挂载\n * @param isHydrating 是否\n */\nfunction diffChildren(\n    vdom: VDom,\n    vchildren: Array<string|number|boolean|VNode>,\n    context: any,\n    mountAll: boolean,\n    isHydrating: boolean,\n) {\n    // 取出上次的子元素\n    let originalChildren = vdom.children || [];\n    const children: Array<VDom|undefined> = [];\n    const keyed: {\n        [name: string]: VDom | undefined;\n    } = {};\n    let keyedLen = 0;\n    let min = 0;\n    let childrenLen = 0;\n    const vlen = vchildren ? vchildren.length : 0;\n    let j;\n    let c;\n    let f;\n    let vchild: string|number|boolean|VNode;\n    let child: VDom | null | undefined;\n    const pchildren: VDom[] = [];\n    const childNodes = vdom.base && vdom.base.childNodes;\n    const unChildren = [];\n    // 处理真实子元素与上次的dom上下文中存放的子元素数量不对的情况\n    // 这种方式只能处理原生添加dom和删除dom。\n    if (childNodes.length !== originalChildren.length) {\n        let offset = 0;\n        const nodeList = childNodes;\n        const nodeLen = nodeList.length;\n        const newChildren: VDom[] = [];\n        for (let i = 0; i < nodeLen; i++) {\n            const node = nodeList[i];\n            let childVdom = originalChildren[i + offset];\n            while (childVdom && node !== childVdom.base) {\n                offset ++;\n                childVdom = originalChildren[i + offset];\n            }\n            if (childVdom) {\n                newChildren.push(childVdom);\n            } else {\n                const newVdom = new VDom(node);\n                newChildren.push(newVdom);\n            }\n        }\n        originalChildren = newChildren;\n    }\n    const len = originalChildren.length;\n    // Build up a map of keyed children and an Array of unkeyed children:\n    if (len !== 0) {\n    for (let i = 0; i < len; i++) {\n        const pchild = originalChildren[i];\n        const props = pchild.props;\n        const key = vlen && props\n            ? pchild.component\n                ? pchild.component._key\n                : typeof props === \"object\" && props.key\n            : null;\n        if (key != null) {\n            keyedLen++;\n            keyed[key] = pchild;\n        } else if (\n            props\n            || (\n                isTextNode(pchild.base)\n                ? (isHydrating ? pchild.base.nodeValue && pchild.base.nodeValue.trim() : true)\n                : isHydrating\n            )\n            ) {\n            children[childrenLen++] = pchild;\n        }\n    }\n    }\n\n    if (vlen !== 0) {\n        for (let i = 0; i < vlen; i++) {\n            vchild = vchildren[i];\n            child = null;\n            // attempt to find a node based on key matching\n            const key = typeof vchild === \"object\" && vchild.key;\n            if (key != null) {\n                if (keyedLen && keyed[key] !== undefined) {\n                    child = keyed[key];\n                    keyed[key] = undefined;\n                    keyedLen--;\n                }\n            } else if (!child && min < childrenLen) {\n            // attempt to pluck a node of the same type from the existing children\n                for (j = min; j < childrenLen; j++) {\n                    c = children[j];\n                    if (c !== undefined && isSameNodeType(c, vchild, isHydrating)) {\n                        child = c;\n                        children[j] = undefined;\n                        if (j === childrenLen - 1) {\n                            childrenLen--;\n                        }\n                        if (j === min) {\n                            min++;\n                        }\n                        break;\n                    }\n                }\n            }\n            // morph the matched/found/created DOM child to match vchild (deep)\n            const pchild = idiff(child, vchild, context, mountAll, false);\n            if (pchild.parent !== vdom) {\n                pchild.parent = vdom;\n            }\n            // 把新的props存储对象存储起来\n            pchildren.push(pchild);\n            // 获取真实\n            f = childNodes[i];\n            if (pchild.base !== vdom.base && pchild.base !== f) {\n                if (f == null) {\n                    vdom.base.appendChild(pchild.base);\n                } else if (pchild.base === f.nextSibling) {\n                    const t: any = f;\n                    removeNode(t);\n                } else {\n                    vdom.base.insertBefore(pchild.base, f);\n                }\n            }\n        }\n    }\n    vdom.children = pchildren;\n    // remove unused keyed children:\n    if (keyedLen) {\n        for (const i in keyed) {\n            const keyItem = keyed[i];\n            if (keyItem != null) {\n                // removeNode(keyed[i].base);\n                recollectNodeTree(keyItem, false);\n            }\n        }\n    }\n\n    // remove orphaned unkeyed children:\n    while (min <= childrenLen) {\n        child = children[childrenLen--];\n        if (child !== undefined) {\n            // removeNode(child.base);\n            recollectNodeTree(child, false);\n        }\n    }\n}\n/** 递归回收(或者只是卸载一个)\n * @param node 要被卸载的dom\n * @param unmountOnly 为true则只触发生命周期，跳过删除(仅在dom上的组件索引不存在有效)\n */\nexport function recollectNodeTree(node: VDom, unmountOnly: boolean) {\n    // 获取dom上的组件索引\n    const component = node.component;\n    if (component) {\n        // 如果存在\n        unmountComponent(component);\n        node.component = undefined;\n    } else {\n        if (typeof node.props === \"object\" && node.props.ref) {\n            // ref用于取消引用dom\n            node.props.ref(null);\n        }\n        if (unmountOnly === false || node.props == null) {\n            // 移除dom\n            removeNode(node.base);\n        }\n        // 卸载子dom\n        removeChildren(node);\n    }\n}\n\nexport function removeChildren(node: VDom) {\n    // 去除最后一个子元素\n    const nodeList = node.children;\n    node.children = undefined;\n    let len = nodeList ? nodeList.length : 0;\n    // node = getLastChild(node && node.base);\n    while (nodeList && len--) {\n        // 不需要移除因为父级已经移除\n        recollectNodeTree(nodeList[len], true);\n    }\n}\n\nfunction diffAttributes(vdom: VDom, attrs: IKeyValue | undefined, old: IKeyValue) {\n    const dom: any = vdom.base;\n    let name: string;\n    for (name in old) {\n        if (!(attrs && attrs[name] != null) && old[name] != null) {\n            const oldValue = old[name];\n            const value = old[name] = undefined;\n            setAccessor(vdom, name, oldValue, value, isSvgMode);\n        }\n    }\n    if (attrs) {\n        for (name in attrs) {\n            if (\n                name !== \"children\"\n                && name !== \"innerHTML\"\n                && (\n                    !(name in old)\n                    || attrs[name] !== (\n                        name === \"value\"\n                        || name === \"checked\"\n                        ? dom[name]\n                        : old[name]\n                    )\n                )\n            ) {\n                const oldValue = old[name];\n                const value = old[name] = attrs[name];\n                setAccessor(vdom, name, oldValue, value, isSvgMode);\n            }\n        }\n    }\n}\n\nfunction replaceVDomParent(oldVDom: VDom, vdom: VDom): void {\n    if (oldVDom.parent && oldVDom.parent.children) {\n        vdom.parent = oldVDom.parent;\n        const index = oldVDom.parent.children.indexOf(oldVDom);\n        if (index !== -1) {\n            oldVDom.parent.children[index] = vdom;\n        }\n    }\n}\n","import options from \"../options\";\nimport { enqueueRender } from \"../render-queue\";\nimport { Component } from \"../component\";\nimport { VNode } from \"../vnode\";\nimport { createComponent, collectComponent } from \"./component-recycler\";\nimport { getNodeProps } from \"./index\";\nimport { removeNode } from \"../dom/index\";\nimport { extend } from \"../util\";\nimport { IKeyValue } from \"../types\";\nimport { VDom } from \"./index\";\nimport {\n    ASYNC_RENDER,\n    ATTR_KEY,\n    FORCE_RENDER,\n    NO_RENDER,\n    SYNC_RENDER,\n} from \"../constants\";\nimport {\n    diff,\n    diffLevel,\n    flushMounts,\n    mounts,\n    recollectNodeTree,\n    removeChildren,\n} from \"./diff\";\n\n/**\n * 设置props，通常来自jsx\n * @param component 组件\n * @param props 新的props\n * @param opts render的执行方式\n * @param context 新的context\n * @param mountAll 是否已挂载\n */\nexport function setComponentProps(component: Component, props: IKeyValue, opts: number, context: IKeyValue, mountAll: boolean) {\n    if (component._disable) {\n        // 如果组件已停用就什么都不做\n        return;\n    }\n    // 阻止在异步时再次进入\n    component._disable = true;\n    // 取出ref设置到组件上\n    const ref = component._ref = props.ref;\n    if (ref) {\n        // 清理掉props中的ref\n        delete props.ref;\n    }\n    // 同上\n    const key = component._key = props.key;\n    if (key) {\n        // 清理掉props中的key\n        delete props.key;\n    }\n    if (!component.vdom || mountAll) {\n        // 如果没有插入到DOM树或正在被render渲染执行钩子\n        if (component.componentWillMount) {\n            component.componentWillMount();\n        }\n    } else if (component.componentWillReceiveProps) {\n        // 更新的钩子\n        component.componentWillReceiveProps(props, context);\n    }\n    if (context && context !== component.context) {\n        // 保存旧的context，设置新的context\n        if (!component.prevContext) {\n            component.prevContext = component.context;\n        }\n        component.context = context;\n    }\n    // 同上\n    if (!component.prevProps) {\n        component.prevProps = component.props;\n    }\n    component.props = props;\n    // 进入renderComponent前启用组件\n    component._disable = false;\n    if (opts !== NO_RENDER) {\n        // 进行renderComponent\n        if (\n            opts === SYNC_RENDER\n            || options.syncComponentUpdates !== false\n            || !component.vdom\n        ) {\n            // 同步执行\n            renderComponent(component, SYNC_RENDER, mountAll);\n        } else {\n            // 异步执行\n            enqueueRender(component);\n        }\n    }\n    // 用于react的标准ref用于dom实例化完成后组件引用，多用于函数组件。\n    if (component._ref) {\n        component._ref(component);\n    }\n}\n\n/**\n * 执行render，diff或新建render\n * @param {Component} component\n * @param {number?} opts\n * @param {boolean?} mountALL\n * @param {boolean?} isChild\n */\nexport function renderComponent(component: Component, opts?: number, mountALL?: boolean, isChild?: boolean): void {\n    if (component._disable) {\n        // 组件已停用直接不做操作。\n        return;\n    }\n    // 获取组件props\n    const props = component.props;\n    // 获取组件state\n    const state = component.state;\n    // 获取组件context\n    let context = component.context;\n    // 获取组件上一次的props没有取当前\n    const previousProps = component.prevProps || props;\n    // 获取组件上一次的state没有取当前\n    const previousState = component.prevState || state;\n    // 获取组件上一次的context没有取当前\n    const previousContext = component.prevContext || context;\n    // 判断是否已有vdom\n    const isUpdate = component.vdom;\n    // 上次移除的vdom\n    const nextVDom = component.nextVDom;\n    // 组件vdom\n    const initialVDom = isUpdate || nextVDom;\n    // 获取当前组件的子组件\n    const initialChildComponent = component._component;\n    // 略过dom更新标记\n    let skip = false;\n    let cvdom: VDom | undefined;\n    if (isUpdate) {\n        // 有dom元素在组件上说明是更新操作.\n        // 把组件上的props，state，context都返回到更新前\n        component.props = previousProps;\n        component.state = previousState;\n        component.context = previousContext;\n        if (opts !== FORCE_RENDER\n            && component.shouldComponentUpdate\n            && component.shouldComponentUpdate(props, state, context) === false\n        ) {\n            // 非用户代码调用(Component.forceUpdate),就执行shouldComponentUpdate钩子\n            // 也就是说如果使用Component.forceUpdate来更新render执行就无法被阻止\n            // shouldComponentUpdate钩子把新的props,state,context作为参数传入\n            // 如果shouldComponentUpdate钩子返回false，跳过下面的dom操作。\n            skip = true;\n        } else if (component.componentWillUpdate) {\n            // render 前钩子与shouldComponentUpdate互斥, Component.forceUpdate更新依旧会触发该钩子。\n            component.componentWillUpdate(props, state, context);\n        }\n        // 把组件上的props，state，context都设置到新的\n        component.props = props;\n        component.state = state;\n        component.context = context;\n    }\n    // 清理掉\n    component.prevProps = undefined;\n    component.prevState = undefined;\n    component.prevContext = undefined;\n    component.nextVDom = undefined;\n    // 重置_dirty\n    component._dirty = false;\n\n    if (!skip) {\n        // 当前组件的render函数返回的VNode\n        const rendered: VNode | void = component.render(props, state, context);\n        //\n        let inst: Component | undefined;\n        if (component.getChildContext) {\n            context = extend(context, component.getChildContext());\n        }\n        // 取出VNode的nodeName\n        const childComponent = rendered && rendered.nodeName;\n        let toUnmount: Component | undefined;\n        let vdom: VDom | undefined;\n\n        if (typeof childComponent === \"function\" && rendered) {\n            // 如果是自定义组件\n\n            // if (component.child) {\n            //     component.child = undefined;\n            // }\n            // 获取VNode上的props\n            const childProps = getNodeProps(rendered);\n            inst = initialChildComponent;\n            if (inst && inst.constructor === childComponent && childProps.key === inst._key) {\n                // 子组件已存在且key未变化只改变props\n                setComponentProps(inst, childProps, SYNC_RENDER, context, false);\n            } else {\n                if (inst) {\n                    // 设置到toUnmount等待unmount\n                    toUnmount = inst;\n                }\n                // 新建Component\n                inst = createComponent(childComponent, childProps, context);\n                // 子组件索引保证下次相同子组件不会重新创建\n                component._component = inst;\n                // 设置好缓存dom\n                inst.nextVDom = inst.nextVDom || nextVDom;\n                // 设置父组件索引\n                inst._parentComponent = component;\n                // 设置props但是不进行render\n                setComponentProps(inst, childProps, NO_RENDER, context, false);\n                // 递归调用renderComponent保证子组件的子组件创建\n                renderComponent(inst, SYNC_RENDER, mountALL, true);\n            }\n            // 把子组件dom设置到base\n            vdom = inst.vdom;\n        } else {\n            // 原生组件\n            // 获取原dom或缓存dom\n            cvdom = initialVDom;\n            // 把自定义子组件放到卸载，对应使用if分支控制自定义组件和原生组件\n            toUnmount = initialChildComponent;\n            if (toUnmount) {\n                // 如果存在说明上次渲染时是一个自定义组件\n                // 清理子组件索引\n                component._component = undefined;\n                // 清理vdom索引\n                cvdom = undefined;\n            }\n\n            if (initialVDom || opts === SYNC_RENDER) {\n                // 组件dom，缓存dom，同步渲染\n                if (component.vdom && component.vdom.component) {\n                    // 清理component索引防止使用同一个component情况下却卸载了。\n                    component.vdom.component = undefined;\n                    //\n                    // const b: any = cbase;\n                    // b._component = undefined;\n                }\n                // 渲染原生组件\n                vdom = diff(\n                    // 原dom\n                    cvdom,\n                    // VNode\n                    rendered,\n                    context,\n                    // 父级或者该原生组件，原dom不存在说明必须触发生命周期\n                    mountALL || !isUpdate,\n                    // 把组件挂载到缓存dom的父级\n                    initialVDom && initialVDom.base.parentNode,\n                    // 以原生组件这里执行说明是自定义组件的第一个原生组件\n                    true,\n                );\n            }\n        }\n\n        if (initialVDom && vdom !== initialVDom && inst !== initialChildComponent) {\n            // 存在缓存dom，现dom和缓存dom不相同且新建过自定义子组件\n            // 获取当前组件缓存dom的父级dom\n            const baseParent = initialVDom.base.parentNode;\n            if (vdom && baseParent && vdom.base !== baseParent) {\n                // 替换到新dom\n                baseParent.replaceChild(vdom.base, initialVDom.base);\n                if (!toUnmount) {\n                    // 没有\n                    initialVDom.component = undefined;\n                    recollectNodeTree(initialVDom, false);\n                }\n            }\n        }\n        if (toUnmount) {\n            // 卸载无用的自定义组件\n            unmountComponent(toUnmount);\n        }\n        // 当前自定义组件的根dom\n        component.vdom = vdom;\n        if (vdom && !isChild) {\n            // 创建了dom且不是子组件渲染\n            let componentRef: Component | undefined = component;\n            let t: Component | undefined = component;\n            // 获取根自定义组件，有可能是一个子组件变化数据\n            while ((t = t._parentComponent)) {\n                componentRef = t;\n                componentRef.vdom = vdom;\n            }\n            // 保证dom的上下文为根自定义组件\n            vdom.component = componentRef;\n            vdom.componentConstructor = componentRef.constructor;\n        }\n    }\n    if (!isUpdate || mountALL) {\n        // 新建dom的需要触发componentDidMount放入mounts等待生命周期触发\n        mounts.unshift(component);\n    } else if (!skip) {\n        // 没有skip render的话触发component.componentDidUpdate，options.afterUpdate钩子\n        if (component.componentDidUpdate) {\n            component.componentDidUpdate(previousProps, previousState, previousContext);\n        }\n        if (options.afterUpdate) {\n            options.afterUpdate(component);\n        }\n    }\n\n    if (component._renderCallbacks != null) {\n        // 触发所有回调\n        while (component._renderCallbacks.length) {\n            component._renderCallbacks.pop().call(component);\n        }\n    }\n    if (!diffLevel && !isChild) {\n        // 根状态下触发生命周期\n        flushMounts();\n    }\n}\n\n/**\n * 创建Component实例，buildComponentFromVNode创建的一般为父级为原生，或没有\n * @param dom 原dom\n * @param vnode VNode实例\n * @param context 父组件来的上下文\n * @param mountALL 是否需要挂载om\n * @param child 父组件用来对dom元素的上下文\n */\nexport function buildComponentFromVNode(\n    vdom: VDom | undefined | null,\n    vnode: VNode,\n    context: IKeyValue,\n    mountALL: boolean,\n): VDom {\n    // 获取根组件缓存\n    let c = vdom && vdom.component;\n    const originalComponent = c;\n    // 判断是否为同一个组件类\n    const isDiectOwner = vdom && vdom.componentConstructor === vnode.nodeName;\n    let isOwner = isDiectOwner;\n    // 获取jsx上的属性\n    const props = getNodeProps(vnode);\n    while (c && !isOwner && (c = c._parentComponent)) {\n        // 向上查找\n        isOwner = c.constructor === vnode.nodeName;\n    }\n\n    if (c && isOwner && (!mountALL || c._component)) {\n        // 获取到可复用的组件，重新设置props，复用状态下有dom所有为了流畅使用异步\n        setComponentProps(c, props, ASYNC_RENDER, context, mountALL);\n        vdom = c.vdom;\n    } else {\n        let oldVDom = vdom;\n        // 不存在可以复用的组件\n        if (originalComponent && !isDiectOwner) {\n            // 存在旧组件卸载它\n            unmountComponent(originalComponent);\n            vdom = oldVDom = null;\n        }\n        // 通过缓存组件的方式创建组件实例\n        c = createComponent(vnode.nodeName, props, context);\n        if (vdom && !c.nextVDom) {\n            // 上次这个标签为原生组件，把将要卸载的组件dom缓存\n            c.nextVDom = vdom;\n            oldVDom = null;\n        }\n        // 留下旧的上下文等待卸载\n        // const oldChild = extend({}, child);\n        // if (child.base) {\n        //     // 清空等待新的上下文\n        //     removeDomChild(child);\n        // }\n        // 设置props，并创建dom\n        setComponentProps(\n            c,\n            props,\n            SYNC_RENDER,\n            context,\n            mountALL,\n        );\n        // 获取dom\n        vdom = c.vdom;\n        if (oldVDom && vdom !== oldVDom) {\n            // 需要卸载dom\n            oldVDom.component = undefined;\n            recollectNodeTree(oldVDom, false);\n        }\n    }\n    return vdom;\n}\n\n/**\n * 卸载组件\n * @param component 组件\n */\nexport function unmountComponent(component: Component) {\n    if (options.beforeUnmount) {\n        // 触发全局钩子\n        options.beforeUnmount(component);\n    }\n    const vdom = component.vdom;\n    // 停用组件\n    component._disable = true;\n    if (component.componentWillUnmount) {\n        // 钩子\n        component.componentWillUnmount();\n    }\n    // 清理dom索引\n    component.vdom = undefined;\n    // 获取子组件\n    const inner = component._component;\n    if (inner) {\n\n        unmountComponent(inner);\n    } else if (vdom) {\n        if (typeof vdom.props === \"object\" && vdom.props.ref) {\n            // 触发dom卸载时的ref事件解除dom索引\n            vdom.props.ref(null);\n        }\n        // 卸载组件dom前把它存到nextBase\n        component.nextVDom = vdom;\n        // 从dom上移除\n        removeNode(vdom.base);\n        // 放入全局缓存对象保存\n        collectComponent(component);\n        // 清空上下文\n        removeChildren(vdom);\n    }\n    if (component._ref) {\n        // 解除外部对组件实例的索引\n        component._ref(null);\n    }\n}\n","import { FORCE_RENDER } from \"./constants\";\nimport { renderComponent } from \"./vdom/component\";\nimport { VNode } from \"./vnode\";\nimport { enqueueRender } from \"./render-queue\";\nimport { extend } from \"./util\";\nimport { IKeyValue } from \"./types\";\nimport { VDom } from \"./vdom/index\";\n\nexport class Component {\n    /**\n     * 默认props\n     */\n    public static defaultProps?: IKeyValue;\n    /**\n     * 当前组件的状态,可以修改\n     */\n    public state: IKeyValue;\n    /**\n     * 由父级组件传递的状态，不可修改\n     */\n    public props: IKeyValue;\n    /**\n     * 组件上下文，由父组件传递\n     */\n    public context: IKeyValue;\n    /**\n     * 组件挂载后的vdom\n     */\n    public vdom?: VDom;\n    /**\n     * 被移除时的vdom缓存\n     */\n    public nextVDom?: VDom;\n    /**\n     * 自定义组件名\n     */\n    public name?: string;\n    /**\n     * 上一次的属性\n     */\n    public prevProps?: IKeyValue;\n    /**\n     * 上一次的状态\n     */\n    public prevState?: IKeyValue;\n    /**\n     * 上一次的上下文\n     */\n    public prevContext?: IKeyValue;\n    /**\n     * 在一个组件被渲染到 DOM 之前\n     */\n    public componentWillMount?: () => void;\n    /**\n     * 在一个组件被渲染到 DOM 之后\n     */\n    public componentDidMount?: () => void;\n    /**\n     * 在一个组件在 DOM 中被清除之前\n     */\n    public componentWillUnmount?: () => void;\n    /**\n     * 在新的 props 被接受之前\n     * @param { IKeyValue } nextProps\n     * @param { IKeyValue } nextContext\n     */\n    public componentWillReceiveProps?: (nextProps: IKeyValue, nextContext: IKeyValue) => void;\n    /**\n     * 在 render() 之前. 若返回 false，则跳过 render，与 componentWillUpdate 互斥\n     * @param { IKeyValue } nextProps\n     * @param { IKeyValue } nextState\n     * @param { IKeyValue } nextContext\n     * @returns { boolean }\n     */\n    public shouldComponentUpdate?: (nextProps: IKeyValue, nextState: IKeyValue, nextContext: IKeyValue) => boolean;\n    /**\n     * 在 render() 之前，与 shouldComponentUpdate 互斥\n     * @param { IKeyValue } nextProps\n     * @param { IKeyValue } nextState\n     * @param { IKeyValue } nextContext\n     */\n    public componentWillUpdate?: (nextProps: IKeyValue, nextState: IKeyValue, nextContext: IKeyValue) => void;\n    /**\n     * 在 render() 之后\n     * @param { IKeyValue } previousProps\n     * @param { IKeyValue } previousState\n     * @param { IKeyValue } previousContext\n     */\n    public componentDidUpdate?: (previousProps: IKeyValue, previousState: IKeyValue, previousContext: IKeyValue) => void;\n    /**\n     * 获取上下文，会被传递到所有的子组件\n     */\n    public getChildContext?: () => IKeyValue;\n    /**\n     * 子组件\n     */\n    public _component?: Component;\n    /**\n     * 父组件\n     */\n    public _parentComponent?: Component;\n    /**\n     * 是否加入更新队列\n     */\n    public _dirty: boolean;\n    /**\n     * render 执行完后的回调队列\n     */\n    public _renderCallbacks?: any[];\n    /**\n     * 当前组件的key用于复用\n     */\n    public _key?: string;\n    /**\n     * 是否停用\n     */\n    public _disable?: boolean;\n    /**\n     * react标准用于设置component实例\n     */\n    public _ref?: (component: Component | null) => void;\n    constructor(props: IKeyValue, context: IKeyValue) {\n        // 初始化为true\n        this._dirty = true;\n        this.context = context;\n        this.props = props;\n        this.state = this.state || {};\n    }\n    /**\n     * 设置state并通过enqueueRender异步更新dom\n     * @param state 对象或方法\n     * @param callback render执行完后的回调。\n     */\n    public setState(state: IKeyValue, callback?: () => void): void {\n        const s: IKeyValue = this.state;\n        if (!this.prevState) {\n            // 把旧的状态保存起来\n            this.prevState = extend({}, s);\n        }\n        // 把新的state和并到this.state\n        if (typeof state === \"function\") {\n            const newState = state(s, this.props);\n            if (newState) {\n                extend(s, newState);\n            }\n        } else {\n            extend(s, state);\n        }\n        if (callback) {\n            // 添加回调\n            this._renderCallbacks = this._renderCallbacks || [];\n            this._renderCallbacks.push(callback);\n        }\n        // 异步队列更新dom，通过enqueueRender方法可以保证在一个任务栈下多次setState但是只会发生一次render\n        enqueueRender(this);\n    }\n    /**\n     * 手动的同步更新dom\n     * @param callback 回调\n     */\n    public forceUpdate(callback: () => void) {\n        if (callback) {\n            this._renderCallbacks = this._renderCallbacks || [];\n            this._renderCallbacks.push(callback);\n        }\n        // 重新执行render\n        renderComponent(this, FORCE_RENDER);\n    }\n    /**\n     * 用来生成VNode的函数，一定要继承后覆盖\n     * @param props\n     * @param state\n     * @param context\n     */\n    public render(props?: IKeyValue, state?: IKeyValue, context?: IKeyValue): VNode | void {\n        // console.error(\"not set render\");\n    }\n}\n","import { Component } from \"./component\";\nimport { IKeyValue } from \"./types\";\n\n/**\n * 简单组件state,props对象只有一层改变使用，超过一层改变就会无法更新\n * @constructor\n */\nexport class PureComponent extends Component {\n    public isPureReactComponent: boolean = true;\n    public shouldComponentUpdate (props: IKeyValue, state: IKeyValue): boolean  {\n        // props,state只要一个不同就返回true\n        return shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n    }\n}\n\n/**\n * 判断两对象的属性值不同\n * @param a\n * @param b\n */\nfunction shallowDiffers(a: IKeyValue, b: IKeyValue): boolean {\n    for (const i in a) {\n        if (!(i in b)) {\n            return true;\n        }\n    }\n    for (const i in b) {\n        if (a[i] !== b[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { diff } from \"./vdom/diff\";\nimport { VNode } from \"./vnode\";\nimport { VDom } from \"./vdom/index\";\n\n/**\n * 创建组件到dom上\n * @param vnode jsx\n * @param parent 挂载的dom元素\n * @param merge 原dom元素\n * @param domChild 虚拟dom用于挂载原来挂载在dom元素上的属性\n */\nexport function render(vnode: VNode, parent: Element, vdom: VDom): VDom {\n    const base = diff(vdom, vnode, {}, false, parent, false);\n    return base;\n}\n","import { Component } from \"./component\";\nimport { extend } from \"./util\";\n\n/**\n * 类似React.createClass, 但未bind(this)\n * @param obj\n */\nexport function createClass(obj: any) {\n    const cl: any = function(props: any, context: any) {\n        Component.call(this, props, context);\n    };\n    // 保证后面的实例的constructor指向cl\n    obj = extend({ constructor: cl }, obj);\n    if (obj.defaultProps) {\n        // 获取defaultProps\n        cl.defaultProps = obj.defaultProps;\n    }\n    // prototype链\n    F.prototype = Component.prototype;\n    cl.prototype = extend(new F(), obj);\n    // 组件名\n    cl.displayName = obj.displayName || \"Component\";\n    return cl;\n}\n\nclass F {\n}\n","import { h, h as createElement } from \"./h\";\nimport { cloneElement } from \"./clone-element\";\nimport { Component } from \"./component\";\nimport { PureComponent } from \"./pure-component\";\nimport { render } from \"./render\";\nimport options from \"./options\";\nimport { createClass } from \"./create-class\";\nimport { rerender } from \"./render-queue\";\nimport { buildVDom } from \"./vdom/index\";\n\nexport default {\n    Component,\n    PureComponent,\n    buildVDom,\n    cloneElement,\n    createClass,\n    createElement,\n    h,\n    options,\n    render,\n    rerender,\n};\n\nexport {\n    Component,\n    PureComponent,\n    buildVDom,\n    cloneElement,\n    createClass,\n    createElement,\n    h,\n    options,\n    render,\n    rerender,\n};\n"],"names":[],"mappings":"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"}