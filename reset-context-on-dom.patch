diff --git a/src/component.ts b/src/component.ts
index c409eb5..c58191a 100644
--- a/src/component.ts
+++ b/src/component.ts
@@ -118,10 +118,6 @@ export class Component {
      * react标准用于设置component实例
      */
     public _ref?: (component: Component | null) => void;
-    /**
-     * VDom暂定用于存放组件根dom的上下文
-     */
-    public child?: any;
     constructor(props: IKeyValue, context: IKeyValue) {
         // 初始化为true
         this._dirty = true;
diff --git a/src/dom/index.ts b/src/dom/index.ts
index e2a961a..f49db44 100644
--- a/src/dom/index.ts
+++ b/src/dom/index.ts
@@ -41,7 +41,6 @@ export function setAccessor(
     old: any,
     value: any,
     isSvg: boolean,
-    child: any,
 ) {
     if (name === "className") {
         // 把className重名为class
@@ -106,17 +105,17 @@ export function setAccessor(
         if (value) {
             if (!old) {
                 // 保证只有一次绑定事件
-                addEventListener(node, name, useCapture, child);
+                addEventListener(node, name, useCapture);
             }
         } else {
             // 移除事件
-            removeEventListener(node, name, useCapture, child);
+            removeEventListener(node, name, useCapture);
         }
-        if (!child._listeners) {
+        if (!node._listeners) {
             // 在上下文中创建存放绑定的方法的对象
-            child._listeners = {};
+            node._listeners = {};
         }
-        child._listeners[name] = value;
+        node._listeners[name] = value;
     } else if (name !== "list" && name !== "type" && !isSvg && name in node) {
         // 安全设置属性
         setProperty(node, name, value == null ? "" : value);
@@ -161,19 +160,19 @@ function setProperty(node: any, name: string, value: string) {
  * @param child 上下文
  * @param useCapture 是否冒泡(兼容ie8)
  */
-function eventProxy(child: any, useCapture: boolean): (e: Event) => void {
+function eventProxy(node: any, useCapture: boolean): (e: Event) => void {
     return (e: Event) => {
-        if (child.isIe8 && !useCapture) {
+        if (node.isIe8 && !useCapture) {
             // ie8事件默认冒泡所以需要阻止
             e.cancelBubble = !useCapture;
         }
         // 取出对于的props事件
-        const listener = child._listeners[e.type];
+        const listener = node._listeners[e.type];
         // 事件钩子
         const event = options.event && options.event(e) || e;
-        if (options.eventBind && child._component) {
+        if (options.eventBind && node._component) {
             // 自动使用所属自定义组件来做this
-            return listener.call(child._component, event);
+            return listener.call(node._component, event);
         }
         // 直接调用事件
         return listener(event);
@@ -203,19 +202,19 @@ export function isTextNode(node: Text | any): boolean {
  * @param useCapture 是否冒泡
  * @param child 上下文
  */
-function addEventListener(node: any, name: string, useCapture: boolean, child: any) {
-    if (typeof child.isIe8 !== "number") {
+function addEventListener(node: any, name: string, useCapture: boolean) {
+    if (typeof node.isIe8 !== "number") {
         // 判断是否为ie9以下的浏览器
-        child.isIe8 = node.addEventListener ? 0 : 1;
+        node.isIe8 = node.addEventListener ? 0 : 1;
     }
     // 生成当前事件的代理方法
-    const eventProxyFun = eventProxy(child, useCapture);
-    if (!child.event) {
-        child.event = {};
+    const eventProxyFun = eventProxy(node, useCapture);
+    if (!node.event) {
+        node.event = {};
     }
     // 把事件代理方法挂载到child.event上等待卸载时使用
-    child.event[name] = eventProxyFun;
-    if (!child.isIe8) {
+    node.event[name] = eventProxyFun;
+    if (!node.isIe8) {
         node.addEventListener(name, eventProxyFun, useCapture);
     } else {
         node.attachEvent("on" + name, eventProxyFun);
@@ -229,11 +228,11 @@ function addEventListener(node: any, name: string, useCapture: boolean, child: a
  * @param useCapture 是否冒泡
  * @param child 上下文
  */
-function removeEventListener(node: any, name: string, useCapture: boolean, child: any) {
+function removeEventListener(node: any, name: string, useCapture: boolean) {
     // 把上下文中的存储的代理事件解绑
-    const eventProxyFun = child.event[name];
-    child.event[name] = undefined;
-    if (!child.isIe8) {
+    const eventProxyFun = node.event[name];
+    node.event[name] = undefined;
+    if (!node.isIe8) {
         node.removeEventListener(name, eventProxyFun, useCapture);
     } else {
         node.detachEvent("on" + name, eventProxyFun);
diff --git a/src/h.ts b/src/h.ts
index bb66f72..d1b57fd 100644
--- a/src/h.ts
+++ b/src/h.ts
@@ -13,7 +13,7 @@ import { IKeyValue } from "./types";
  * @see http://jasonformat.com/wtf-is-jsx
  * @public
  */
-export function h(nodeName: string | Component | ((props?: IKeyValue, state?: IKeyValue, context?: IKeyValue) => VNode), attributes: IKeyValue, ...args: Array<VNode|string>) {
+export function h(nodeName: string | typeof Component | ((props?: IKeyValue, state?: IKeyValue, context?: IKeyValue) => VNode), attributes: IKeyValue, ...args: Array<VNode|string>) {
     // 初始化子元素列表
     const stack: Array<VNode|string> = [];
     const children: Array<VNode|string> = [];
diff --git a/src/render.ts b/src/render.ts
index f6526f5..dfbb897 100644
--- a/src/render.ts
+++ b/src/render.ts
@@ -1,8 +1,6 @@
 import { diff } from "./vdom/diff";
 import { VNode } from "./vnode";

-const child = {};
-
 /**
  * 创建组件到dom上
  * @param vnode jsx
@@ -10,11 +8,7 @@ const child = {};
  * @param merge 原dom元素
  * @param domChild 虚拟dom用于挂载原来挂载在dom元素上的属性
  */
-export function render(vnode: VNode, parent: Element, merge: Element, domChild?: any) {
-    const pchild = domChild || child;
-    const base: any = diff(merge, vnode, {}, false, parent, false, pchild);
-    if (pchild._component) {
-        base._component = pchild._component;
-    }
+export function render(vnode: VNode, parent: Element, merge: Element) {
+    const base: any = diff(merge, vnode, {}, false, parent, false);
     return base;
 }
diff --git a/src/vdom/component.ts b/src/vdom/component.ts
index bf26c38..693b7b6 100644
--- a/src/vdom/component.ts
+++ b/src/vdom/component.ts
@@ -174,13 +174,8 @@ export function renderComponent(component: Component, opts?: number, mountALL?:
                 // 子组件已存在且key未变化只改变props
                 setComponentProps(inst, childProps, SYNC_RENDER, context, false);
             } else {
-                if (inst) {
-                    // 设置到toUnmount等待unmount
-                    toUnmount = inst;
-                    toUnmount.child = extend({}, toUnmount.child);
-                    // 清理
-                    removeDomChild(inst.child);
-                }
+                // 设置到toUnmount等待unmount
+                toUnmount = inst;
                 // 新建Component
                 inst = createComponent(childComponent, childProps, context);
                 // 子组件索引保证下次相同子组件不会重新创建
@@ -189,8 +184,6 @@ export function renderComponent(component: Component, opts?: number, mountALL?:
                 inst.nextBase = inst.nextBase || nextBase;
                 // 设置父组件索引
                 inst._parentComponent = component;
-                // 设置domchild
-                inst.child = component.child;
                 // 设置props但是不进行render
                 setComponentProps(inst, childProps, NO_RENDER, context, false);
                 // 递归调用renderComponent保证子组件的子组件创建
@@ -214,12 +207,12 @@ export function renderComponent(component: Component, opts?: number, mountALL?:

             if (initialBase || opts === SYNC_RENDER) {
                 // 组件dom，缓存dom，同步渲染
-                if (component.child && component.child._component) {
+                if (cbase) {
                     // 清理component索引防止使用同一个component情况下却卸载了。
-                    component.child._component = undefined;
                     //
-                    // const b: any = cbase;
-                    // b._component = undefined;
+                    const b: any = cbase;
+                    b._component = undefined;
                 }
                 // 渲染原生组件
                 base = diff(
@@ -234,8 +227,6 @@ export function renderComponent(component: Component, opts?: number, mountALL?:
                     initialBase && initialBase.parentNode,
                     // 以原生组件这里执行说明是自定义组件的第一个原生组件
                     true,
-                    // dom上下文
-                    component.child,
                 );
             }
         }
@@ -249,13 +240,10 @@ export function renderComponent(component: Component, opts?: number, mountALL?:
                 baseParent.replaceChild(base, initialBase);
                 if (!toUnmount) {
                     // 没有
-                    // const initBase: any = initialBase;
+                    const initBase: any = initialBase;
                     // 去除dom上的component索引
-                    // initBase._component = null;
-                    component.child.base = initialBase;
-                    component.child._component = null;
-                    recollectNodeTree(component.child, false);
-                    component.child.base = base;
+                    initBase._component = null;
+                    recollectNodeTree(initialBase, false);
                 }
             }
         }
@@ -275,8 +263,11 @@ export function renderComponent(component: Component, opts?: number, mountALL?:
                 componentRef.base = base;
             }
             // 保证dom的上下文为根自定义组件
-            component.child._component = componentRef;
-            component.child._componentConstructor = componentRef.constructor;
+            const _base: any = base;
+            try {
+                _base._component = componentRef;
+                _base._componentConstructor = componentRef.constructor;
+            } catch (e) {}
         }
     }
     if (!isUpdate || mountALL) {
@@ -317,14 +308,13 @@ export function buildComponentFromVNode(
     vnode: VNode,
     context: IKeyValue,
     mountALL: boolean,
-    child: any,
 ) {
     // 获取根组件缓存
-    let c = child && child._component;
+    let c = dom && dom._component;
     const originalComponent = c;
     let oldDom = dom;
     // 判断是否为同一个组件类
-    const isDiectOwner = c && child._componentConstructor === vnode.nodeName;
+    const isDiectOwner = c && dom._componentConstructor === vnode.nodeName;
     let isOwner = isDiectOwner;
     // 获取jsx上的属性及其它如
     const props = getNodeProps(vnode);
@@ -346,8 +336,6 @@ export function buildComponentFromVNode(
             c.nextBase = dom;
             oldDom = null;
         }
-        c.child = child;
-        // child._component = c;
         setComponentProps(
             c,
             props,
@@ -378,9 +366,9 @@ export function unmountComponent(component: Component) {
     const anyBase: any = base;
     if (inner) {
         unmountComponent(inner);
-    } else if (anyBase && component.child) {
-        if (component.child[ATTR_KEY] && component.child[ATTR_KEY].ref) {
-            component.child[ATTR_KEY].ref(null);
+    } else if (anyBase) {
+        if (anyBase[ATTR_KEY] && anyBase[ATTR_KEY].ref) {
+            anyBase[ATTR_KEY].ref(null);
         }
         // 卸载组件dom前把它存到nextBase
         component.nextBase = anyBase;
@@ -388,19 +376,9 @@ export function unmountComponent(component: Component) {
         removeNode(anyBase);
         // 放入全局缓存对象保存
         collectComponent(component);
-        removeChildren(component.child);
+        removeChildren(anyBase);
     }
     if (component._ref) {
         component._ref(null);
     }
 }
-
-export function removeDomChild(child: any) {
-    child.base = null;
-    child._component = null;
-    child[ATTR_KEY] = null;
-    child.event = null;
-    child._listeners = null;
-    child._componentConstructor = null;
-    child.children = [];
-}
diff --git a/src/vdom/diff.ts b/src/vdom/diff.ts
index 4216bf0..ee09ba5 100644
--- a/src/vdom/diff.ts
+++ b/src/vdom/diff.ts
@@ -1,6 +1,6 @@
 import { ATTR_KEY } from "../constants";
 import { isSameNodeType, isNamedNode } from "./index";
-import { buildComponentFromVNode, unmountComponent, removeDomChild } from "./component";
+import { buildComponentFromVNode, unmountComponent } from "./component";
 import {
     setAccessor,
     createNode,
@@ -46,22 +46,17 @@ export function flushMounts() {
  * @param componentRoot 是否为componentRoot
  */
 export function diff(
-    dom: Element | undefined,
+    dom: any,
     vnode: VNode | void,
     context: IKeyValue,
     mountAll: boolean,
     parent: any,
     componentRoot: boolean,
-    child: any,
 ): Element {
-    if (child.base && dom !== child.base) {
-        // 原preact使用dom存放数据，现在，如果dom不存在，且pchild内有dom就卸载掉
-        removeDomChild(child);
-    }
     if (!diffLevel++) {
         // 在diff调用递归层数为0时设置isSvgMode，hydrating
         isSvgMode = parent != null && parent.ownerSVGDocument !== undefined;
-        hydrating = dom != null && !(child && child[ATTR_KEY]);
+        hydrating = dom != null && !(dom && dom[ATTR_KEY]);
     }
     // 调用idiff生成dom
     const ret = idiff(
@@ -70,7 +65,6 @@ export function diff(
         context,
         mountAll,
         componentRoot,
-        child,
     );
     // 如果有父dom直接appendChild
     if (parent && ret.parentNode !== parent) {
@@ -92,7 +86,6 @@ function idiff(
     context: IKeyValue,
     mountAll: boolean,
     componentRoot?: boolean,
-    child?: any,
 ) {
     // if (child.base && dom !== child.base) {
     //     // 原preact使用dom存放数据，现在，如果dom不存在，且pchild内有dom就卸载掉
@@ -109,7 +102,7 @@ function idiff(
             dom
             && isTextNode(dom)
             && dom.parentNode
-            && (!child._component || componentRoot)
+            && (!dom._component || componentRoot)
         ) {
             if (dom.nodeValue !== vnode) {
                 dom.nodeValue = vnode;
@@ -124,16 +117,15 @@ function idiff(
                 // if (child.base !== dom) {
                 //     child.base = dom;
                 // }
-                recollectNodeTree(child, true);
+                recollectNodeTree(dom, true);
             }
         }
-        child[ATTR_KEY] = true;
-        child.base = out;
+        out[ATTR_KEY] = true;
         return out;
     }
     let vnodeName = vnode.nodeName;
     if (typeof vnodeName === "function") {
-        return buildComponentFromVNode(dom, vnode, context, mountAll, child);
+        return buildComponentFromVNode(dom, vnode, context, mountAll);
     }

     isSvgMode = vnodeName === "svg"
@@ -151,23 +143,19 @@ function idiff(
             // if (child.base !== dom) {
             //     child.base = dom;
             // }
-            recollectNodeTree(child, true);
+            recollectNodeTree(dom, true);
         }
     }
     const fc = out.firstChild;
-    let props = child[ATTR_KEY];
+    let props = out[ATTR_KEY];
     const vchildren = vnode.children;
     if (props == null) {
-        props = child[ATTR_KEY] = {};
+        props = {};
         for (let a = out.attributes, i = a.length; i-- ; ) {
             const attr = a[i];
             props[attr.name] = attr.value;
         }
     }
-
-    if (child.base !== out) {
-        child.base = out;
-    }
     if (
         !hydrating
         && vchildren
@@ -181,20 +169,17 @@ function idiff(
             fc.nodeValue = vchildren[0];
         }
     } else if (vchildren && vchildren.length || fc != null) {
-        if (!child.children) {
-            child.children = [];
-        }
         innerDiffNode(
             out,
             vchildren,
             context,
             mountAll,
             hydrating || props.dangerouslySetInnerHTML != null,
-            child,
         );
     }

-    diffAttributes(out, vnode.attributes, props, child);
+    diffAttributes(out, vnode.attributes, props);
+    out[ATTR_KEY] = props;
     isSvgMode = prevSvgMode;
     return out;
 }
@@ -205,9 +190,8 @@ function innerDiffNode(
     context: any,
     mountAll: boolean,
     isHydrating: boolean,
-    domChild: any,
 ) {
-    let originalChildren = domChild.children;
+    const originalChildren = dom.childNodes;
     const children = [];
     const keyed: {
         [name: string]: any;
@@ -221,32 +205,6 @@ function innerDiffNode(
     let f;
     let vchild;
     let child;
-    const pchildren = [];
-    const childNodes = dom.childNodes;
-    const unChildren = [];
-
-    if (childNodes.length !== originalChildren.length) {
-        let offset = 0;
-        const nodeList = childNodes;
-        const nodeLen = nodeList.length;
-        const newChildren = [];
-        for (let i = 0; i < nodeLen; i++) {
-            const node = nodeList[i];
-            let vdom = originalChildren[i + offset];
-            while (vdom && node !== vdom.base) {
-                offset ++;
-                vdom = originalChildren[i + offset];
-            }
-            if (vdom) {
-                newChildren.push(vdom);
-            } else {
-                newChildren.push({
-                    base: node,
-                });
-            }
-        }
-        originalChildren = newChildren;
-    }
     const len = originalChildren.length;
     // Build up a map of keyed children and an Array of unkeyed children:
     if (len !== 0) {
@@ -264,8 +222,8 @@ function innerDiffNode(
         } else if (
             props
             || (
-                isTextNode(pchild.base)
-                ? (isHydrating ? pchild.base.nodeValue.trim() : true)
+                isTextNode(pchild)
+                ? (isHydrating ? pchild.nodeValue.trim() : true)
                 : isHydrating
             )
             ) {
@@ -304,14 +262,10 @@ function innerDiffNode(
                     }
                 }
             }
-            // 获取上一次的props存储对象
-            tchild = child || {};
             // morph the matched/found/created DOM child to match vchild (deep)
-            child = idiff(child && child.base, vchild, context, mountAll, false, tchild);
-            // 把新的props存储对象存储起来
-            pchildren.push(tchild);
+            child = idiff(child, vchild, context, mountAll, false);
             // 获取真实
-            f = childNodes[i];
+            f = originalChildren[i];
             if (child && child !== dom && child !== f) {
                 if (f == null) {
                     dom.appendChild(child);
@@ -324,7 +278,6 @@ function innerDiffNode(
             }
         }
     }
-    domChild.children = pchildren;
     // remove unused keyed children:
     if (keyedLen) {
         for (const i in keyed) {
@@ -355,7 +308,6 @@ export function recollectNodeTree(node: any, unmountOnly: any) {
         // 如果存在
         unmountComponent(component);
         node._component = null;
-        removeDomChild(node);
     } else {
         if (node[ATTR_KEY] != null && node[ATTR_KEY].ref) {
             // ref用于取消引用dom
@@ -363,7 +315,7 @@ export function recollectNodeTree(node: any, unmountOnly: any) {
         }
         if (unmountOnly === false || node[ATTR_KEY] == null) {
             // 移除dom
-            removeNode(node.base);
+            removeNode(node);
         }
         // 卸载子dom
         removeChildren(node);
@@ -371,26 +323,22 @@ export function recollectNodeTree(node: any, unmountOnly: any) {
 }

 export function removeChildren(node: any) {
-    // 去除最后一个子元素
-    const nodeList = node.children;
-    node.children = [];
-    let len = nodeList ? nodeList.length : 0;
-    // node = getLastChild(node && node.base);
-    while (len--) {
+    node = getLastChild(node);
+    while (node) {
+        const next = getPreviousSibling(node);
         // 不需要移除因为父级已经移除
-        recollectNodeTree(nodeList[len], true);
+        recollectNodeTree(node, true);
+        node = next;
     }
-    // removeDomChild
-    removeDomChild(node);
 }

-function diffAttributes(dom: any, attrs: any, old: any, child: any) {
+function diffAttributes(dom: any, attrs: any, old: any) {
     let name: string;
     for (name in old) {
         if (!(attrs && attrs[name] != null) && old[name] != null) {
             const oldValue = old[name];
             const value = old[name] = undefined;
-            setAccessor(dom, name, oldValue, value, isSvgMode, child);
+            setAccessor(dom, name, oldValue, value, isSvgMode);
         }
     }
     for (name in attrs) {
@@ -409,7 +357,7 @@ function diffAttributes(dom: any, attrs: any, old: any, child: any) {
         ) {
             const oldValue = old[name];
             const value = old[name] = attrs[name];
-            setAccessor(dom, name, oldValue, value, isSvgMode, child);
+            setAccessor(dom, name, oldValue, value, isSvgMode);
         }
     }

diff --git a/src/vdom/index.ts b/src/vdom/index.ts
index cdb246b..3724bea 100644
--- a/src/vdom/index.ts
+++ b/src/vdom/index.ts
@@ -14,11 +14,11 @@ import { IKeyValue } from "../types";
 export function isSameNodeType(node: any, vnode: VNode, hydrating: boolean) {
     if (typeof vnode === "string" || typeof vnode === "number") {
         // vnode是文本节点,判断dom是否为文本节点
-        return isTextNode(node.base);
+        return isTextNode(node);
     }
     if (typeof vnode.nodeName === "string") {
         // vnode是原生组件,判断dom非组件的根节点且标签名相同
-        return !node._componentConstructor && isNamedNode(node.base, vnode.nodeName);
+        return !node._componentConstructor && isNamedNode(node, vnode.nodeName);
     }
     return hydrating || node._componentConstructor === vnode.nodeName;
 }

